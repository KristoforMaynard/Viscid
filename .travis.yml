language: generic

env:
  global:
    - secure: LbEq8hL3eHuZ8DJQWCQvV5ZPcfSi6hS6k68shuCbLNGn5D8VuKwj96e4twzeB1k5AG860a47ZggaAPfeo1CCprzSeNoy1X0qct5PtJsgRiTlKhBfN7XmYGKbZ+dkxBuetrPJv1sRW7ed6R66QDSN52C00RMTKF36LpunvyYtXKqS28pFFJ9R5i++EL59PY33j6QYjTMQF4aFENnLgC/XAZgwCk9MGvCe40cND2P/AT8RkyYWuQhMqWnWKt+6VDdlbonSRKJmX/lLVMk63vLNnEUYiejGS5lAbcG76cAsKh4kA5tPI8lM/F37pF10n1q9Zu//VhAYLsWX94zb3ifbmBVH+fB1xUogF5OJChx6BYrSZdn3bfnoWWzpdsGLzOdmtndpzskizzuR7o/DhklNcs4IMdhKvKhNOiFFUqhA73YsEBIhffYpV/exP8DcX+eLq6goY3FIcn/ttW7Mx6u3QW1wHqHJh4jOq4KR8EKVz9ewMectf6Stu81hYqm2enyNhpYKd0bIVs5++5wim6/vQcWL18+t63xi8c7T5spoGggPRL4FDBGP5pGH5b4a5oOnnPq3tvJ/Es59syX7GI/YH8NCfPqBATWfPfOJq6Ewfyv/RPCwNRp1xXzb1sMtyB2QP4VPSAHg//2QPkuGZ4rrMTIsQNjMTHzWIYJ2TOYy2Lw=
    - 'deployable="^(master|dev|travis)$"'
  matrix:
    - PYTHON=2.6 DEPS=full
    - PYTHON=2.7 DEPS=full FLAKE=1 DEPLOY_DOCS=1
    # - PYTHON=3.3 DEPS=full
    # - PYTHON=3.4 DEPS=full  # is this necessary if 3.3 and 3.5 are tested?
    # - PYTHON=3.5 DEPS=full FLAKE=1

git:
  submodules: false

sudo: false

addons:
  apt:
    packages:
    - gfortran

cache:
  directories:
    - $HOME/miniconda
    - $HOME/mycache

before_install:
  ## First off, let's lint the version numbers in __init__.py and Changes.md

  # before we build, check to see if we're in a release branch, and if
  # so, then do some 0th order validation on the viscid.__version__
  - 'if [[ ($TRAVIS_BRANCH =~ ^(.*release.*|master)$) ]]; then
       if [ "$(grep __version__ viscid/__init__.py | grep -E "(dev|travis)")" != "" ]; then
         echo "Oops, you are preparing a release, but you still have either";
         echo "dev or travis in the version number";
         false;
       fi
     elif [[ $TRAVIS_BRANCH =~ ${deployable} ]]; then
       if [ "$(grep __version__ viscid/__init__.py | grep ${TRAVIS_BRANCH} )" == "" ]; then
         echo "Oops, You are on a deployable branch (that is not master), ";
         echo "but the branch name is not in the version number";
         false;
       fi
     fi'

  # make sure the version string appears in CHANGES.md
  - 'ver_re="__version__.*[\"'']+([^\"'']+)[\"'']+"'
  - 'version=$([[ "$(grep __version__ viscid/__init__.py)" =~ ${ver_re} ]]; echo "${BASH_REMATCH[1]}")'
  - 'if [ "$(grep -E "${version}\s*$" CHANGES.md)" == "" ]; then
       echo "Oops, the version ${version} does not appear in CHANGES.md";
       false;
     fi'

  ## Now setup the Anaconda tools
  - 'if [ ! -f "$HOME/miniconda/bin/conda" ]; then
       wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
       rm -rf $HOME/miniconda;
       bash ./miniconda.sh -b -p $HOME/miniconda;
     fi'
  - 'if [ ! -d "${HOME}/mycache" ]; then
       mkdir ${HOME}/mycache;
     fi'
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda

  ## Now setup some Viscid specific things, like rc files and make sure
  ## we have a virtual frame buffer
  - cp tests/resources/matplotlibrc .
  - cp tests/resources/viscidrc ~/.viscidrc
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start

install:
  - 'export envname="testenv-${PYTHON}-${DEPS}"'
  - 'export envpath="$HOME/miniconda/envs/${envname}"'
  - 'export pkg_list="tests/resources/conda_${PYTHON}_${DEPS}.txt"'
  - 'export cached_pkg_list="${HOME}/mycache/conda_${PYTHON}_${DEPS}.txt"'
  - 'export prefix="${HOME}/inst/${envname}"'

  - ls ../Viscid/${pkg_list}

  # if conda package list doesn't match the cached one, just blast
  # the cached conda environment
  - 'if [ -f ${cached_pkg_list} ]; then
       if [ "$(diff -qw ${pkg_list} ${cached_pkg_list})" != "" ]; then
         echo "Package Lists Differed, killing current venv";
         echo "$(diff -w ${pkg_list} ${cached_pkg_list})";
         rm ${cached_pkg_list};
         rm -rf ${envpath};
       fi
     fi'

  # if the conda envronment we need isn't cached, create it, otherwise
  # do an update
  - 'if [ ! -d "${envpath}" ]; then
       conda create -q -n ${envname} python=${PYTHON};
       source activate ${envname};
       conda install --yes --file ${pkg_list};
       cp ${pkg_list} ${cached_pkg_list};
     else
       source activate ${envname};
       conda update --all --yes --file ${pkg_list};
     fi'

  # if deplying docs, run tests inplace, this makes preparing the docs
  # faster since cython's fused types makes 8 times too much code, ug!
  - 'if [ "${DEPLOY_DOCS}" == "1" ]; then
       make inplace;
       export PATH="${PWD}/scripts:${PATH}";
       export PYTHONPATH="${PWD}:${PYTHONPATH}";
     else
       rm -rf ${prefix};
       python setup.py install --prefix=${prefix} --install-lib=${prefix};
       export PATH="${prefix}/bin:${PATH}";
       export PYTHONPATH="${prefix}:${PYTHONPATH}";
     fi'

before_script:
  - 'if [ "${FLAKE}" == "1" ]; then make flake8; fi'

script:
  - make instcheck
  - 'if [[ $TRAVIS_BRANCH =~ ${deployable}$ ]]; then
       make deploy-summary;
     fi'

deploy:
  provider: "script"
  skip_cleanup: true
  script:
    - make deploy-html
  on:
    branch: "*"
    condition: '($TRAVIS_BRANCH =~ ${deployable}) && ("${DEPLOY_DOCS}" == "1")'
