
language: generic

env:
  global:
    - secure: LbEq8hL3eHuZ8DJQWCQvV5ZPcfSi6hS6k68shuCbLNGn5D8VuKwj96e4twzeB1k5AG860a47ZggaAPfeo1CCprzSeNoy1X0qct5PtJsgRiTlKhBfN7XmYGKbZ+dkxBuetrPJv1sRW7ed6R66QDSN52C00RMTKF36LpunvyYtXKqS28pFFJ9R5i++EL59PY33j6QYjTMQF4aFENnLgC/XAZgwCk9MGvCe40cND2P/AT8RkyYWuQhMqWnWKt+6VDdlbonSRKJmX/lLVMk63vLNnEUYiejGS5lAbcG76cAsKh4kA5tPI8lM/F37pF10n1q9Zu//VhAYLsWX94zb3ifbmBVH+fB1xUogF5OJChx6BYrSZdn3bfnoWWzpdsGLzOdmtndpzskizzuR7o/DhklNcs4IMdhKvKhNOiFFUqhA73YsEBIhffYpV/exP8DcX+eLq6goY3FIcn/ttW7Mx6u3QW1wHqHJh4jOq4KR8EKVz9ewMectf6Stu81hYqm2enyNhpYKd0bIVs5++5wim6/vQcWL18+t63xi8c7T5spoGggPRL4FDBGP5pGH5b4a5oOnnPq3tvJ/Es59syX7GI/YH8NCfPqBATWfPfOJq6Ewfyv/RPCwNRp1xXzb1sMtyB2QP4VPSAHg//2QPkuGZ4rrMTIsQNjMTHzWIYJ2TOYy2Lw=
    - 'deployable="^(master|dev|travis)$"'
    - LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libgfortran.so.3.0.0
    - QT_API=pyside
  matrix:
    - PYTHON=2.6 DEPS=red
    - PYTHON=2.7 DEPS=full FLAKE=1 DEPLOY_DOCS=1
    - PYTHON=3.3 DEPS=full
    # - PYTHON=3.4 DEPS=full  # is this necessary if 3.3 and 3.5 are tested?
    - PYTHON=3.5 DEPS=full FLAKE=1

git:
  submodules: false

sudo: false

addons:
  apt:
    packages:
    - gfortran

# cache:
#   directories:
#     - $HOME/miniconda
#     - $HOME/mycache

before_install:
  ## First off, let's lint the version numbers in __init__.py and Changes.md

  # before we build, check to see if we're in a release branch, and if
  # so, then do some 0th order validation on the viscid.__version__
  - 'if [[ ($TRAVIS_BRANCH =~ ^(.*release.*|master)$) ]]; then
       if [ "$(grep __version__ viscid/__init__.py | grep -E "(dev|travis)")" != "" ]; then
         echo "Oops, you are preparing a release, but you still have either";
         echo "dev or travis in the version number";
         false;
       fi
     elif [[ $TRAVIS_BRANCH =~ ${deployable} ]]; then
       if [ "$(grep __version__ viscid/__init__.py | grep ${TRAVIS_BRANCH} )" == "" ]; then
         echo "Oops, You are on a deployable branch (that is not master), ";
         echo "but the branch name is not in the version number";
         false;
       fi
     fi'

  # make sure the version string appears in CHANGES.md
  - 'ver_re="__version__.*[\"'']+([^\"'']+)[\"'']+"'
  - 'version=$([[ "$(grep __version__ viscid/__init__.py)" =~ ${ver_re} ]]; echo "${BASH_REMATCH[1]}")'
  - 'if [ "$(grep -E "${version}\s*$" CHANGES.md)" == "" ]; then
       echo "Oops, the version ${version} does not appear in CHANGES.md";
       false;
     fi'

  ## Now setup the Anaconda tools
  # it saves some download time to use the same python iff 2.7
  - 'if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
       export CONDA_URL="https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh";
     else
       export CONDA_URL="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh";
     fi'
  # linux has wget, OS X has curl... such is life
  - 'if [[ "$(which wget &>/dev/null && echo $?)" == "0" ]]; then
       wget "${CONDA_URL}" -O miniconda.sh;
     else
       curl "${CONDA_URL}" > miniconda.sh;
     fi'
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  ## Now setup some Viscid specific things, like rc files and make sure
  ## we have a virtual frame buffer
  - mkdir -p ~/.config/matplotlib
  - cp tests/resources/matplotlibrc ~/.config/matplotlib/
  - cp tests/resources/viscidrc ~/.viscidrc
  - export DISPLAY=:99.0
  - sh -e /etc/init.d/xvfb start

install:
  - mkdir -p ${HOME}/mycache
  - 'export env_name="viscid_${PYTHON}_${DEPS}"'
  - 'export envpath="$HOME/miniconda/envs/${env_name}"'
  - 'export env_spec="tests/resources/${env_name}.yml"'
  - 'export cached_env_spec="${HOME}/mycache/${env_name}.yml"'
  - 'export prefix="${HOME}/inst/${env_name}"'

  - ls ../Viscid/${env_spec}
  - ls $HOME/miniconda/envs

  # if conda package list doesn't match the cached one, just blast
  # the cached conda environment
  - 'if [ -f ${cached_env_spec} ]; then
       if [ "$(diff -qw ${env_spec} ${cached_env_spec})" != "" ]; then
         echo "Package Lists Differed, killing current venv";
         echo "$(diff -w ${env_spec} ${cached_env_spec})";
         rm ${cached_env_spec};
         rm -rf ${envpath};
       fi
     fi'

  # if the conda envronment we need isn't cached, create it, otherwise
  # do an update
  - 'if [ ! -d "${envpath}" ]; then
       conda env create -f ${env_spec};
       source activate ${env_name};
       cp ${env_spec} ${cached_env_spec};
     else
       source activate ${env_name};
       conda update --all --yes;
     fi'

  # if deplying docs, run tests inplace, this makes preparing the docs
  # faster since cython's fused types makes 8 times too much code, ug!
  - 'if [ "${DEPLOY_DOCS}" == "1" ]; then
       make inplace;
       export PATH="${PWD}/scripts:${PATH}";
       export PYTHONPATH="${PWD}:${PYTHONPATH}";
     else
       rm -rf ${prefix};
       python setup.py install --prefix=${prefix} --install-lib=${prefix};
       export PATH="${prefix}/bin:${PATH}";
       export PYTHONPATH="${prefix}:${PYTHONPATH}";
     fi'

before_script:
  - 'if [ "${FLAKE}" == "1" ]; then make flake8; fi'

script:
  - 'if [ "${DEPLOY_DOCS}" == "1" ]; then
       make check;
     else
       make instcheck;
     fi'
  - 'if [[ $TRAVIS_BRANCH =~ ${deployable}$ ]]; then
       make deploy-summary;
     fi'

deploy:
  provider: "script"
  skip_cleanup: true
  script:
    - make deploy-html
  on:
    branch: "*"
    condition: '($TRAVIS_BRANCH =~ ${deployable}) && ("${DEPLOY_DOCS}" == "1")'
