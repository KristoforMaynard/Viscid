#!/usr/bin/env python
# NOTE: this does not work yet

raise NotImplementedError("This is a carry over from old ggcm plotting scripts")

from __future__ import print_function

import sys
import subprocess as sub
import multiprocessing as mp

import numpy as np
from matplotlib.colors import LogNorm
from matplotlib.image import NonUniformImage

from viscid import readers
from viscid.plot import mpl
import vggcm
import pggcm
import fggcm


def split_options(opt):
    temp = []
    for i, o in enumerate(opt):
        os = o.split(',')
        osopts = {}
        for j, osj in enumerate(os[1:]):
            osjopts = osj.split('_')
            osopts[osjopts[0]] = osjopts[1:]
        temp.append([os[0], osopts])
    return temp

def plot_collections(opt, collections, startind):
    import pylab as pl
    from matplotlib.image import NonUniformImage
    global verb

    nplott = len(collections)
    for t, c in enumerate(collections):
        plotx = []
        for fi, f in enumerate(c):
            if isinstance(f, vggcm.File2d):
                plotx += [fi]
            elif isinstance(f, vggcm.File3d):
                if not opt.planes: raise ValueError("Tried plotting a 3d file without specifying one or more -P")
                plotx += [[fi, i] for i in range(len(opt.planes))]
        nplotx = len(plotx)
        nploty = len(opt.plotvars)
        ax = [None for i in range(nplotx*nploty)]
        shareindglobal = None
        shareindptype = [None for i in opt.plotvars]
        pl.subplots_adjust(wspace=0.3, left=0.1, right=0.95)
        if opt.planes: shareindplane = [None for i in opt.planes]
        for i, plotxi in enumerate(plotx):
            if type(plotxi) == type(0):
                threeddata = False
                fi = plotxi
                plane = ["{0.plane}_{0.pval}".format(c[fi]), {}] # put into same format as opt.planes[i]
                #x, y = c[fi].meshgrid()
            elif type(plotxi) == type([]):
                threeddata = True
                fi = plotxi[0]
                plane = opt.planes[plotxi[1]]

            for j in range(nploty):
                var = opt.plotvars[j]
                varnm = var[0]
                varmods = var[1]

                # parse modifiers for this plot. modifiers are ',' separated and mod options are '_' separated
                ptype = 'pcolormesh'
                cmap = None
                grid = {}
                shareaxis = "global"
                modxlim = None
                modylim = None
                linewidth = 1
                useslice = []
                norm = 'lin'
                autoscale = ()
                nequal = False
                for mod, modopts in varmods.items():
                    if mod=='lin' or mod=='log':
                        if len(modopts) == 1:
                            if float(modopts[0]) == 0.0:
                                autoscale = 'sym_auto'
                            else: # this autoscaling with 1 arg is untested, i'm betting it won't work
                                autoscale = (float(modopts[0]),)
                        elif len(modopts) == 2:
                            autoscale = (float(modopts[0]), float(modopts[1]))
                        if mod.startswith('lin'):
                            norm = 'lin' # default
                        elif mod.startswith('log'):
                            norm = 'log'
                    elif mod=='s':
                        useslice = modopts
                    elif mod=='c' or mod=='contour':
                        ptype = 'contour'
                        ncontours = int(modopts[0]) if len(modopts)>0 else 256
                    elif mod=='im':
                        ptype = 'im'
                    elif mod=='g' or mod=='grid':
                        grid = {'edgecolors':'k', 'linewidths':0.2, 'antialiased': True}
                    elif mod=='x':
                        modxlim = [float(val) for val in modopts]
                        shareaxis = "ptype"
                    elif mod=='y':
                        modylim = [float(val) for val in modopts]
                        shareaxis = "ptype"
                    elif mod=='own':
                        shareaxis = None
                    elif mod=='ne':
                        nequal = True
                    else:
                        if verb: print("Could not understand modifier: {0}".format(mod))

                # parse options for a given plane
                for mod, modopts in plane[1].items():
                    if mod=='x':
                        modxlim = [float(val) for val in modopts]
                        shareaxis = "plane"
                    elif mod=='y':
                        modylim = [float(val) for val in modopts]
                        shareaxis = "plane"
                    elif mod=='own':
                        shareaxis = None
                    else:
                        if verb: print("Could not understand modifier: {0}".format(mod))

                # do any plot opts require slicing? the slice method should
                # be general enough now to permit its use all the time
                coords, plot_dims = c[fi].meshgrid([plane[0]]+useslice)
                pdata, plot_dims = c[fi].slice_plane(varnm, [plane[0]]+useslice)

                # do auto scaling of values
                if autoscale == 'sym_auto':
                    absmax = np.max(np.abs(pdata))
                    autoscale = (-absmax, absmax)
                if norm == 'lin':
                    norm = pl.normalize(*autoscale)
                elif norm == 'log':
                    norm = LogNorm()

                if opt.own:
                    shareaxis = None
                if len(plot_dims)==1:
                    shareaxis = None
                    nequal = True

                # setup the new subplot
                ind = i+(nplotx*j)

                sharex, sharey = (None, None)
                if shareaxis == "global":
                    if shareindglobal == None:
                        shareindglobal = ind
                    sharex, sharey = (ax[shareindglobal], ax[shareindglobal])
                elif shareaxis == "plane":
                    if shareindplane[plotxi[1]] == None:
                        shareindplane[plotxi[1]] = ind
                    sharex, sharey = (ax[shareindplane[plotxi[1]]], ax[shareindplane[plotxi[1]]])
                elif shareaxis == "ptype":
                    if shareindptype[j] == None:
                        shareindptype[j] = ind
                    sharex, sharey = (ax[shareindptype[j]], ax[shareindptype[j]])
                if not opt.transpose:
                    ax[ind] = (pl.subplot(nplotx, nploty, 1+j+(nploty*i), sharex=sharex, sharey=sharey))
                else:
                    ax[ind] = (pl.subplot(nploty, nplotx, 1+ind, sharex=sharex, sharey=sharey))
                if not nequal:
                    ax[ind].axis('equal')

                # plot into the subplot
                if len(plot_dims) == 1:
                    if len(coords[0]) == pdata.size + 1:
                        coords[0] = coords[0][:-1]
                    pl.plot(coords[0], pdata.ravel(), 'k.-', mec='g', mfc='g')
                elif len(plot_dims) == 2:
                    if cmap==None and norm and norm.vmin and \
                       norm.vmax and np.abs(norm.vmax + 1.0*norm.vmin) < 1e-4:
                        cmap =  pl.get_cmap('seismic')
                    if ptype == 'pcolormesh':
                        pcm = ax[ind].pcolormesh(coords[0], coords[1], pdata, norm=norm, cmap=cmap, **grid)
                        pl.colorbar(pcm)
                    elif ptype == 'contour':
                        pcm = ax[ind].contourf(coords[0], coords[1], pdata, ncontours, norm=norm, cmap=cmap)
                        pl.colorbar(pcm)
                    elif ptype == 'im':
                        raise Warning("NonUniformImage is no longer guarenteed to work.")
                        nui = NonUniformImage(ax[ind], interpolation='nearest', norm=norm, cmap=cmap)
                        nui.set_data(coords[0], coords[1], pdata)
                        ax[ind].images.append(nui)
                        pl.colorbar(nui)
                    #if grid:
                    #    pggcm.grid(pl, x, y, ax[ind], **grid)
                    pggcm.mpl_earth(pl, plane[0], ax[ind])
                if modxlim: ax[ind].set_xlim(*modxlim)
                if modylim: ax[ind].set_ylim(*modylim)

                filelabel = "{0[run]} - {0[time]}".format(c[fi].finfo)
                varlabel = varnm
                xlabel=ylabel=""
                if not opt.transpose:
                    if j==0: ylabel = filelabel
                    if i==0: ax[ind].set_title(varlabel)
                    xlabel = "{0}".format(plot_dims[0])
                    if len(plot_dims)>1: ylabel += "\n{0}".format(plot_dims[1])
                    ax[ind].set_xlabel(xlabel)
                    ax[ind].set_ylabel(ylabel, multialignment='center')
                else:
                    if j==0: ax[ind].set_title(filelabel)
                    if i==0: ylabel = varlabel
                    xlabel = "{0}".format(plot_dims[0])
                    if len(plot_dims)>1: ylabel += "\n{0}".format(0)
                    ax[ind].set_xlabel(xlabel)
                    ax[ind].set_ylabel(ylabel, multialignment='center')
                    #pl.sca(ax[ind])

        # handle output here
        if opt.figsize: pl.gcf().set_size_inches(opt.figsize, forward=False)
        if shareindglobal != None:
            if opt.xlim: ax[shareindglobal].set_xlim(*opt.xlim)
            if opt.ylim: ax[shareindglobal].set_ylim(*opt.ylim)
        if opt.animate:
            pl.savefig("{0}_{1:06d}.png".format(opt.prefix, t+1+startind))
        elif opt.out:
            pl.savefig(opt.out)
        if opt.show:
            pl.show()
        pl.clf()

if __name__=='__main__':
    parser = vggcm.optargs()
    '''parser.add_option('-p', dest='plotvar', action='store', type='string', default=None,
                      help="Which variable to plot.")'''
    parser.add_option('-p', dest='plotvars', action='append', type='string',
                      help="Append to the list of which variables to plot. Plot modifiers are ',' separated"
                           " and mod options are '_' separated (ex: -pbz,lin_10_10,x_-15_5).")
    parser.add_option('-P', '--plane', dest='planes', action='append', type='string', default=None,
                      help="Appends to a list of which planes in any 3d files to plot. Modifiers are comma separated"
                            "similar to -p (ex: -Px_22.2,x_-5_5,t_-5_5 for x=22.2 ). "
                            "Units are Re (not 0.1 Re like the 2d file name convention).")
    parser.add_option('-T', '--transpose', dest='transpose', action='store_true',
                      help='Transpose the plots, so put the same run horizontal.')
    parser.add_option('-e', dest='earth', type='string', default='w',
                      help="String representing the color that the earth should be drawn (default: w).")
    parser.add_option('-w', '--show', dest='show', action='store', type='int', default=-1,
                      help="Show plots with pl.show() - 0 for no show, !0 for show (default !0).")
    parser.add_option('-a', '--animate', dest='animate', action='store', type='string', default=None,
                      help="Animate in time. Give this argument the name of the output file.")
    parser.add_option('-k', dest='keep', action='store_true',
                      help="Keep temporary files.")
    parser.add_option('-r', '--rate', dest='framerate', action='store', type='int', default=5,
                      help="Animation frame rate (default 5).")
    parser.add_option('--qscale', dest='qscale', action='store', type='string', default='2',
                      help="Animation quality flag (default 2).")
    parser.add_option('-s', '--size', dest='figsize', action='callback', callback=vggcm.optlist_float,
                      type='string', default=None, help="mpl figure size in inches (ex: -s2,2)")
    parser.add_option('-x', '--xlim', dest='xlim', action='callback', callback=vggcm.optlist_float,
                      type='string', default=None, help="set x limits of figure (ex: -x-3.0,40)")
    parser.add_option('-y', '--ylim', dest='ylim', action='callback', callback=vggcm.optlist_float,
                      type='string', default=None, help="set y limits of figure (ex: -y'-3.0,40')")
    parser.add_option('--np', dest='np', action='store', type='int', default=1,
                      help="Plot on np subprocesses. Useful when making a 100 image animation.")
    parser.add_option('--own', dest='own', action='store_true', help="each plot uses its own axes, none are linked.")
    (opt, args) = parser.parse_args()
    global verb
    verb = opt.v - opt.q

    args = fggcm.expand_fnames(args)
    if len(args) == 0:
        raise ValueError("No data file specified, or specified wildcards did not match any files.")
    if not opt.plotvars:
        raise ValueError("I don't know what variables to plot.")

    opt.plotvars = split_options(opt.plotvars)
    if opt.planes:
        opt.planes = split_options(opt.planes)

    if opt.animate:
        collectby = 'time'
        dotpos = opt.animate.rfind('.')
        opt.show = 0 if opt.show==-1 else opt.show
        if dotpos > -1:
            opt.prefix = opt.animate[:dotpos]
        else:
            opt.prefix = opt.animate
    else:
        collectby = 'flat'
    collections = vggcm.collect_files(args, collectby=collectby)

    if not opt.animate and not opt.out:
        # if not animating, and not outputting file, then show
        opt.show = True

    #call here
    if len(collections) == 1 or opt.np == 1:
        plot_collections(opt, collections, 0)
    else:
        startind, lastind = vggcm.chunk_job(len(collections), opt.np)
        jobs = []
        for s, l in zip(startind, lastind):
            jobs.append(mp.Process(target=plot_collections, args=(opt, collections[s:l+1], s)))
            jobs[-1].start()
        for j in jobs:
            j.join()

    # all is said and done, now animate if that's needed
    if opt.animate:
        sub.Popen("ffmpeg -r {0} -qscale {1} -i {2}_%06d.png {3}".format(opt.framerate, opt.qscale, opt.prefix, opt.animate),
                  shell=True).communicate()
        if not opt.keep:
            sub.Popen("rm {0}_*.png".format(opt.prefix), shell=True).communicate()

##
## EOF
##

