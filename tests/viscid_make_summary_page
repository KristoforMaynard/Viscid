#!/usr/bin/env python
"""Make an html page in PWD comparing plots with reference side-by-side
"""

from __future__ import division, print_function
import argparse
from datetime import datetime
from glob import glob
import os
from os.path import abspath, basename, dirname, relpath
from subprocess import Popen, CalledProcessError, PIPE
import sys

from viscid_test_common import test_dir, plot_dir, ref_dir
import viscid
from viscid.compat import OrderedDict


header = """
<html>

<head>

<style>

* {
    font-family: Helvetica, "Trebuchet MS", Arial, sans-serif;
}

h1 {
    font-size: 3em;
    margin-top: 1em;
    margin-bottom: 1em;
    margin-left: auto;
    margin-right: auto;
}

table.info {
    margin-bottom: 2em;
    margin-left: auto;
    margin-right: auto;
}

table.info td.leftmost {
    padding-right: 2em;
}

table.plots {
    border-collapse: collapse;
    width: 100%;
}

table.plots td {
    border-left: 1px solid #98bf21;
    border-right: 1px solid #98bf21;
    width: 50%;
}

table.plots td.leftmost {
    border-left: none;
}

table.plots td.rightmost {
    border-right: none;
}

table.plots th {
    font-size: 1.6em;
    text-align: center;
    padding-top: 0.4em;
    padding-bottom: 0.4em;
    background-color: #A7C942;
    color: #ffffff;
}

table.plots td.testname {
    color: #A7C942;
    // background-color: #ffffff;
    border-left: none;
    border-right: none;
    font-size: 1.6em;
    font-weight: bold;
    padding-top: 2.0em;
    padding-bottom: 0.0em;
}

table.plots td.plotname {
    text-align: center;
    color: #536421;
    // background-color: #ffffff;
    font-size: 1.0em;
    border-left: none;
    border-right: none;
    padding-top: 2.0em;
    padding-bottom: 1.5em;
}

table.plots .imgrow {
}

img {
    dispaly: block;
    margin-left: auto;
    margin-right: auto;
    max-width: 100%;
    max-height: 100%;
}

.nofile {
}
</style>

</head>
<body>

<h1 align='center'>Viscid Test Plots</h1>
"""

footer = """
</body>
</html>
"""

def make_img_cell(fname, tdclass=""):
    if os.path.isfile(os.path.join(dirname(args.fname), fname)):
        meat = "<img src='{0}'/>".format(fname)
    else:
        meat = "<p class='nofile'>Plot '{0}' does not exist</p>".format(fname)
    return "<td align='center' class='{0}'>{1}</td>\n".format(tdclass, meat)

def make_plot(plot_name, rel_plot_dir=plot_dir, rel_ref_dir=ref_dir, start='.'):
    meat = "<tr>\n"
    meat += "<td class='plotname' colspan='2'>{0}</td>\n".format(plot_name)
    meat += "</tr>\n"
    meat += "<tr class='imgrow'>\n"
    meat += make_img_cell(rel_plot_dir + "/" + plot_name, tdclass='leftmost') + "\n"
    meat += make_img_cell(rel_ref_dir + "/" + plot_name, tdclass='rightmost') + "\n"
    meat += "</tr>\n"
    return meat

def make_test_row(test_name):
    meat = "<tr><td class='testname' colspan='2'>Test: {0}</td></tr>".format(test_name)
    return meat

def main():
    global args
    parser = argparse.ArgumentParser(description="Make summary page")
    parser.add_argument("fname", nargs="?", default="./summary.html")
    args = viscid.vutil.common_argparse(parser)

    rel_plot_dir = relpath(abspath(plot_dir), start=dirname(args.fname))
    rel_ref_dir = relpath(abspath(ref_dir), start=dirname(args.fname))

    # make up file list
    fmt = "png"
    test_plots = glob(plot_dir + "/*.{0}".format(fmt))
    ref_plots = glob(ref_dir + "/*.{0}".format(fmt))

    all_plots = [os.path.basename(s) for s in test_plots]
    all_plots += [os.path.basename(s) for s in ref_plots]
    all_plots = list(set(all_plots))
    all_plots.sort()

    html = header

    ################################
    # make a table for the run info
    info = OrderedDict()
    info["Version"] = viscid.__version__

    try:
        git_version = Popen(["git", "--version"], stdout=PIPE,
                            stderr=PIPE).communicate()[0].decode()
        info["Commit"] = Popen(['git', 'rev-parse', 'HEAD'],
                               stdout=PIPE, stderr=PIPE).communicate()[0].decode()
        info["Branch"] = Popen(['git', 'rev-parse', '--abbrev-ref', 'HEAD'],
                               stdout=PIPE, stderr=PIPE).communicate()[0].decode()
        p0 = Popen(['git', 'tag', '-l', '--contains', 'HEAD'], stdout=PIPE)
        p1 = Popen(['tr', '-s', ' ', ':'], stdin=p0.stdout, stdout=PIPE)
        info["Tag"] = p1.communicate()[0].decode().strip()
    except CalledProcessError:
        pass

    try:
        info["Commit"] = os.environ["TRAVIS_COMMIT"]
        info["Branch"] = os.environ["TRAVIS_BRANCH"]
        info["Tag"] = os.environ["TRAVIS_TAG"]
        jobid = os.environ["TRAVIS_JOB_ID"]
        jobnum = os.environ["TRAVIS_JOB_NUMBER"]
        reposlug = os.environ["TRAVIS_REPO_SLUG"]
        info["Travis-CI Job"] = ("<a href=https://travis-ci.com/{0}/jobs/{1}>{2}</a>"
                                 "".format(reposlug, jobid, jobnum))
    except KeyError:
        pass

    try:
        if not info["Tag"]:
            info["Tag"] = "-None-"
    except KeyError:
        pass

    try:
        info["Commit"] = info["Commit"].strip()[:16] + "..."
    except KeyError:
        pass

    info["Python"] = "{0[0]}.{0[1]}.{0[2]}".format(sys.version_info)
    info["OS"] = "{0[0]} {0[4]}".format(os.uname())
    info["Time Generated"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

    html += "<table class='info'>\n"
    for k, v in info.items():
        html += "<tr><td class='leftmost'>{0}:</td>".format(k)
        html += "<td class='rightmost'>{0}</td></tr>\n".format(v)
    html += "</table>\n"

    ####################################
    # make a table with the plots in it
    html += "<table class='plots'>\n"
    html += "<tr><th>Test Plot</th><th>Reference Plot</th></tr>\n"

    last_test_name = ""
    for plot_name in all_plots:
        test_name = '-'.join(plot_name.split('-')[:-1])
        if test_name != last_test_name:
            html += make_test_row(test_name)
            last_test_name = test_name

        html += make_plot(plot_name, rel_plot_dir, rel_ref_dir)

    html += "</table>\n"
    html += footer

    with open(args.fname, 'w') as f:
        f.write(html)
    return 0

if __name__ == "__main__":
    sys.exit(main())

##
## EOF
##
